///////////////////////////////////////////////////////////////////////////////
//
//	Writer.cpp
//
///////////////////////////////////////////////////////////////////////////////
#include "Writer.h"

///////////////////////////////////////////////////////////////////////////////
//
//	Constructor
//
///////////////////////////////////////////////////////////////////////////////
Writer::Writer(sc_module_name name) : sc_channel(name)
{
	SC_THREAD(thread);
	sensitive << clk.pos();
}

///////////////////////////////////////////////////////////////////////////////
//
//	Destructor
//
///////////////////////////////////////////////////////////////////////////////
Writer::~Writer()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//	Thread
//
///////////////////////////////////////////////////////////////////////////////
void Writer::thread(void)
{
	// Variable
	unsigned int uiAddress;
	unsigned int uiData;

	// Boucle infinie
	while (1)
	{
		// Attendre signal pour ecrire
		do {
			wait(clk->posedge_event());
		} while (!request.read());

		// Lecture de l'adresse et des donnees
		uiAddress = address.read();
		uiData = data.read();

		// Ecriture dans le port de la ram
		dataPortRAM->Write(uiAddress, uiData);
		
		// On ecrit dans le port jusqu'au prochain front montant de l'horloge
		ack.write(true);
		wait(clk->posedge_event());
		ack.write(false);
	}
}